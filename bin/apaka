#! /usr/bin/env ruby
require 'find'
require 'optparse'
require 'apaka'
require 'tempfile'
require 'yaml'
require 'thread'
require 'timeout'

def build_locally(packager, pkg_name, options)
    options, unknown_options = Kernel.filter_options options,
        :release_name => 'local',
        :rock_base_install_dir => '/opt/rock',
        :patch_dir => nil,
        :result_dir => nil,
        :package_version => nil,
        :debian_package_name => pkg_name.gsub("/",'-'),
        :meta_depends => nil,
        :rebuild => false,
        :install => false,
        :config_file => nil,
        :ancestor_blacklist => nil,
        :log_dir => packager.log_dir

    arguments = []
    if options[:release_name]
        arguments << "--release-name" << options[:release_name]
    end
    if options[:rock_base_install_dir]
        arguments << "--rock-base-install-dir" << options[:rock_base_install_dir]
    end
    if options[:patch_dir]
        arguments << "--patch-dir" << options[:patch_dir]
    end
    if options[:package_version]
        arguments << "--package-version" << options[:package_version]
    end
    if options[:config_file]
        arguments << "--config-file" << options[:config_file]
    end
    distribution = packager.target_platform.distribution_release_name
    architecture = packager.target_platform.architecture

    arguments << "--distributions" << distribution
    arguments << "--architectures" << architecture

    if options[:ancestor_blacklist]
        options[:ancestor_blacklist].map do |pkg_name|
            arguments << "--ancestor-blacklist-package" << pkg_name
        end
    end

    puts "Debian packaging: '#{pkg_name}' with arguments #{arguments}"
    if options[:rebuild] || !packager.reprepro_has_package?(options[:debian_package_name], options[:release_name], distribution, architecture)
        puts "############### package #{pkg_name} ###################"
        rebuild_log = File.join(options[:log_dir], "#{options[:debian_package_name]}-deb_local-rebuild.log")
        cmd = ["deb_package", "--rebuild"]
        cmd.concat arguments
        if options[:meta_depends]
            cmd << "--meta" << pkg_name
            cmd.concat options[:meta_depends]
        else
            cmd << "--package" << pkg_name
        end

        puts "Execution of: #{cmd.join(" ")} &> #{rebuild_log}"
        if !system(*cmd, [:out, :err] => rebuild_log, :close_others => true)
            raise RuntimeError, "Local rebuild of pkg #{pkg_name} failed -- see #{rebuild_log}"
        end
        debian_package_dir = packager.packaging_dir(options[:debian_package_name])
        dsc_file = Dir.glob(File.join(debian_package_dir,"*.dsc")).first
        if !dsc_file
            raise RuntimeError, "Local rebuild of pkg #{pkg_name} failed -- see #{rebuild_log}"
        end
        puts "############### build #{pkg_name} #####################"
        options[:log_file] ||= File.join(options[:log_dir], "#{options[:debian_package_name]}-deb_local-build.log")
        puts "Building package from #{dsc_file} -- see log (#{options[:log_file]})"

        options[:result_dir] ||= debian_package_dir
        Apaka::Packaging::Installer.build_package_from_dsc(dsc_file,
                                         distribution,
                                         architecture,
                                         options[:release_name],
                                         options)

        deb_files = Dir.glob(File.join(debian_package_dir,"*.deb"))
        if deb_files.empty?
            raise RuntimeError, "Building package failed - no *.deb file found"
        end

        deb_file = nil
        deb_files.each do |file|
            if file =~ /-dbgsym_/
                next
            else
                deb_file = file
                break
            end
        end
        if !deb_file
            raise RuntimeError, "Building package failed - only deb file with debug symbols found"
        end

        puts "Registering debian package: #{deb_file}"
        packager.register_debian_package(deb_file,
                                        options[:release_name],
                                        distribution,
                                        options[:rebuild])
    end

    if options[:install]
        if Apaka::Packaging::Installer.installed?(options[:debian_package_name])
            puts "Package: #{options[:debian_package_name]} is already installed"
        end

        if packager.target_platform == Apaka::Packaging::TargetPlatform.autodetect_target_platform
            puts "############### install #{pkg_name} #####################"
            install_log = File.join(options[:log_dir],"#{options[:debian_package_name]}-deb_local-install.log")
            cmd = [ "deb_package", "--install" ]
            cmd.concat arguments
            cmd << pkg_name

            puts "Execution of: #{cmd.join(" ")} &> #{install_log}"
            if !system(*cmd, [:out, :err] => install_log, :close_others => true)
                raise RuntimeError, "Local install of pkg #{pkg_name} failed -- see #{install_log}"
            end
        else
            puts "Package has been build for #{packager.target_platform}. Not installing package since current platform is #{Apaka::Packaging::TargetPlatform.autodetect_target_platform}"
        end
    end
end

o_architecture = nil
o_build_meta = false
o_custom_meta = nil
o_deregister = false
o_distribution = nil
o_dry_run = false
o_max_parallel_jobs = 1
o_meta_only = false
o_no_deps = false
o_patch_dir = "#{ENV['AUTOPROJ_CURRENT_ROOT']}/deb_patches"
o_prepare_local_build = false
o_ancestor_blacklist_file = nil
o_register = false
o_show_current_os = false
o_skip = false
o_verbose = false

build_options = Hash.new
options = OptionParser.new do |opt|
    opt.banner = "Usage: deb_local [options]"
    opt.on("--ancestor-blacklist FILE", "YAML File containing packages to exclude from being searched in ancestor releases.") do |file|
        o_ancestor_blacklist_file = file
    end
    opt.on("--architecture NAME", "Target architecture to build for") do |arch|
        build_options[:architecture] = arch
    end
    opt.on("--build-meta", "Build meta packages from autoproj meta packages found on the command line") do
        o_build_meta = true
    end
    opt.on("--config-file NAME", "Configuration file that shall be used for packaging") do |name|
        build_options[:config_file] = File.absolute_path(name)
    end
    opt.on("--custom-meta NAME", "Build a meta package for all packages on the command line") do |name|
        o_custom_meta = name
    end
    opt.on("--distribution NAME","Target distribution release to build for, e.g. trusty") do |dist|
        build_options[:distribution] = dist
    end
    opt.on("--dry-run", "Show the packages that will be build") do
        o_dry_run = true
    end
    opt.on("--deregister", "Deregister/remove a package") do
        o_deregister = true
    end
    opt.on("-j JOBS", "--jobs JOBS","Maximum number of parallel jobs") do |jobs|
        o_max_parallel_jobs = jobs.to_i
    end
    opt.on("--meta-only", "Build only meta packages(from --custom-meta and --build-meta)") do
        o_meta_only = true
    end
    opt.on("--no-deps","Ignore building dependencies") do
        o_no_deps = true
    end
    opt.on("--patch-dir DIR", String, "Overlay directory to patch existing packages (and created gems) during the packaging process") do |dir|
        patch_dir = File.expand_path(dir)
        if !File.directory?(patch_dir)
            puts "Given patch directory '#{patch_dir}' does not exist"
            exit -1
        end
        o_patch_dir = patch_dir
    end
    opt.on("--prepare", "Prepare the local building of packages") do
        o_prepare_local_build = true
    end
    opt.on("--rebuild","Rebuild package (otherwise the existing packaged deb will be used)") do
        build_options[:rebuild] = true
    end
    opt.on("--register", "Register a package") do
        o_register = true
    end
    opt.on("--reinstall", "Reinstall already installed packages") do
        build_options[:reinstall] = true
    end
    opt.on("--release-name NAME", String, "Release name for the generated set of packages -- debian package will be installed in a subfolder with this name in base dir") do |name|
        build_options[:release_name] = name
    end
    opt.on("--rock-base-install-dir DIR", String, "Rock base installation directory (prefix) for deployment of the local debian packages") do |dir|
        require 'pathname'
        if !Pathname.new(dir).absolute?
            raise ArgumentError, "Given path for --rock-base-install-dir has to be absolute, but was relative: '#{dir}'"
        end
        build_options[:rock_base_install_dir] = dir
    end
    opt.on("--show-current-os", "Show information about the current operating system, which can be used to augment the configuration if necessary") do
        o_show_current_os = true
    end
    opt.on('--verbose', 'Display output') do
        o_verbose = true
    end
end

o_selected_packages = options.parse(ARGV)

build_options[:release_name] ||= 'local'
if File.exists? o_patch_dir
    build_options[:patch_dir] = o_patch_dir
else
    # no need to have a valid patch_dir for prepare, register or deregister,
    # but likely needed for other options
    if !o_prepare_local_build && !o_register && !o_deregister
        Apaka::Packaging.info "No patch directory: #{o_patch_dir} given"
    end
end

# Making sure configuration is properly initialized
Apaka::Packaging::Config.reload_config(build_options[:config_file], build_options[:release_name])

package_info_ask = Apaka::Packaging::PackageInfoAsk.new(:detect, Hash.new())

if o_show_current_os
    os = package_info_ask.osdeps_operating_system
    puts "Current operating system:"
    if os
        puts "    type: #{os[0].join(",")}"
        puts "    labels: #{os[1].join(",")}"
    end
    exit 0
end

# Handling special packages which have been moved in the layout, and the user is
# using the 'moved' package name
if !o_selected_packages.empty?
    Autoproj.manifest.moved_packages.each do |original_name, moved_name|
        if o_selected_packages.include?(moved_name)
            o_selected_packages.delete(moved_name)
            o_selected_packages << original_name
            Apaka::Packaging.info "Identified package '#{moved_name}' as moved package, hence using its original name '#{original_name}'"
        end
    end
end
Apaka::Packaging.info "Selected packages: #{o_selected_packages}"

Apaka::Packaging.root_dir = package_info_ask.root_dir
Apaka::Packaging::TargetPlatform.osdeps_release_tags= package_info_ask.osdeps_release_tags
packager = Apaka::Packaging::Debian.new(build_options)

if o_prepare_local_build
    puts "Preparing local building of packages"
    local_distribution = packager.target_platform.distribution_release_name
    local_arch = packager.target_platform.architecture
    Apaka::Packaging::Installer.install_all_requirements(build_options[:patch_dir], local_distribution, local_arch)

    tempfile = Tempfile.new("apaka.conf.")
    document_root = File.join(Apaka::Packaging::WWW_ROOT)
    packages_subfolder = File.basename(Apaka::Packaging::DEB_REPOSITORY)
    autogenerated_config = tempfile.path

    Apaka::Packaging::Installer.ensure_webserver_running
    Apaka::Packaging::Installer.create_webserver_config(document_root, packages_subfolder,
                                                           autogenerated_config)
    Apaka::Packaging::Installer.install_webserver_config(autogenerated_config)

    if build_options[:release_name]
        packager.initialize_reprepro_repository(build_options[:release_name])
    end

    puts "Preparation completed"
    exit 0
end

if o_register
    if !build_options[:distribution]
        puts "Please provide the distribution for deregistration"
        exit 0
    end
    if !build_options[:release_name]
        puts "Please provide the release_name for deregistration"
        exit 0
    end
    o_selected_packages.each do |pkg_name_expression|
        packager.register_debian_package("#{pkg_name_expression}",
                                           build_options[:release_name],
                                           build_options[:distribution])
    end
    exit 0
end

if o_deregister
    if !build_options[:distribution]
        puts "Please provide the distribution for deregistration"
        exit 0
    end
    if !build_options[:release_name]
        puts "Please provide the release_name for deregistration"
        exit 0
    end
    o_selected_packages.each do |pkg_name_expression|
        packager.deregister_debian_package("#{pkg_name_expression}",
                                           build_options[:release_name],
                                           build_options[:distribution])
    end
    exit 0
end

packager.rock_autobuild_deps[:orogen] = [ package_info_ask.pkginfo_from_pkg(package_info_ask.package_by_name("orogen")) ]

packager.rock_release_name = build_options[:release_name]
build_options[:packager] = packager
packager.initialize_reprepro_repository(build_options[:release_name])
puts "Building local package for: #{packager.target_platform}"

selected_gems = []
selected_rock_packages = o_selected_packages.select do |name|
    if pkg = package_info_ask.package(name)
        Apaka::Packaging.debug "Package: #{name} is a known rock package"
        true
    elsif package_info_ask.is_metapackage?(name)
        Apaka::Packaging.debug "Package: #{name} is a known rock meta package"
        #we want the dependencies(which it will resolve to)
        true
    elsif Apaka::Packaging::GemDependencies::is_gem?(name)
        Apaka::Packaging.debug "Package: #{name} is a gem"
        selected_gems << [name, nil]
        false
    else
        true
    end
end

Apaka::Packaging.info "Selected_packages: #{o_selected_packages} --> rock_packages: #{selected_rock_packages}, gems: #{selected_gems}"

selection = []

# When a ruby gem shall be packaged directly there are no selected rock
# packages, but selected ony
is_gem = selected_rock_packages.empty? && !o_selected_packages.empty?
if !is_gem
    selection = package_info_ask.autoproj_init_and_load(selected_rock_packages)
    selection = package_info_ask.resolve_user_selection_packages(selection)
end

# Compute dependencies for a given selection
package_info_ask.package_set_order = ["orocos.toolchain","rock.core","rock"]
all_rock_packages = package_info_ask.all_required_packages selection, selected_gems, no_deps: o_no_deps

rock_pkginfos = all_rock_packages[:pkginfos]
required_gems = all_rock_packages[:gems]
required_gems_versions = all_rock_packages[:gem_versions]

# create a custom meta package from the packages that are listed on the
# command line including their gem dependencies
meta_packages = {}
if o_custom_meta
    meta_packages[o_custom_meta] =
        rock_pkginfos.collect {|pkginfo| pkginfo.name } +
        required_gems.select do |pkg|
        native_name, is_osdeps = packager.native_dependency_name(pkg)
        !is_osdeps
    end
end

# check if the current selection contains a metapackage
if o_build_meta
    o_selected_packages.each do |name|
        if package_info_ask.is_metapackage?(name)
            meta_packages[name] = package_info_ask.resolve_user_selection_packages([name])
        end
    end
end

###############################################################
# create a list of all blacklisted packages and their
# reverse dependencies

ancestor_blacklist_patterns = []
if o_ancestor_blacklist_file
    ancestor_blacklist_patterns = YAML.load_file(o_ancestor_blacklist_file)
end

ancestor_blacklist = Set.new
ancestor_blacklist_meta = Set.new

# packages should be in build order, so in theory, we don't need to loop.
pkgs_added = true
while pkgs_added
    pkgs_added = false
    rock_pkginfos.each do |pkginfo|
        if ancestor_blacklist.include?(pkginfo)
            next
        end
        if package_info_ask.ignored?(pkginfo.name)
            next
        end

        if ancestor_blacklist_patterns.any? do |pat|
               if pat[-2..-1] == "/*"
                   pkginfo.name =~ /^#{pat[0..-3]}\//
               else
                   pkginfo.name == pat
               end
           end
            ancestor_blacklist << pkginfo
            pkgs_added = true
            next
        end

        pkgdeps = pkginfo.dependencies

        if ancestor_blacklist.intersect?(pkgdeps[:rock_pkginfo].to_set) ||
           ancestor_blacklist.intersect?(packager.rock_autobuild_deps[pkginfo.build_type].to_set)
            ancestor_blacklist << pkginfo
            pkgs_added = true
        end
    end
end

# meta packages cannot have other meta packages in their dependency list
# at least, autoproj won't give them to us and expand them instead.
meta_packages.each do |pkg_name,dependencies|
    if ancestor_blacklist_meta.include?(pkg_name)
        next
    end
    reqpkgs = package_info_ask.all_required_packages dependencies,[]

    if ancestor_blacklist.intersect?(reqpkgs[:pkginfos].to_set)
        ancestor_blacklist_meta << pkg_name
    end
end

#####
# Filter package lists

Apaka::Packaging::TargetPlatform::ancestor_blacklist = ancestor_blacklist.map do |pkginfo|
    packager.debian_name(pkginfo, false)
end.to_set

Apaka::Packaging::TargetPlatform::ancestor_blacklist.merge(
    ancestor_blacklist_meta.map do |name|
        packager.debian_meta_name(name, false)
    end)

all_rock_packages = packager.filter_all_required_packages all_rock_packages
rock_pkginfos = all_rock_packages[:pkginfos]
required_gems = all_rock_packages[:gems]
required_gems_versions = all_rock_packages[:gem_versions]

# Create logging directory
distribution = packager.target_platform.distribution_release_name
architecture = packager.target_platform.architecture
log_dir = packager.log_dir

###############################################################

# runnable job consists of dependencies and build parameters for build_locally
# a job is removed from the list if a dependency fails
# a job is started when all its dependencies have been built

# { jobname => { :dependencies => [:gems, :rock], :build_parameters => [] } }
pending_jobs = {}
running_jobs = {}
finished_jobs = {}
failed_jobs = {}
skipped_jobs = {}

if !required_gems || required_gems.empty?
elsif o_meta_only
else
    index = 0
    required_gems.each do |pkg|
        is_osdeps = false
        native_name, is_osdeps = packager.native_dependency_name(pkg)
        if is_osdeps
            Apaka::Packaging.debug "Gem: #{pkg} is available as os dependency: #{native_name} (therefore it will not be build)"
            finished_jobs["ruby-#{pkg}"] = { :type => :nativegem,
                                             :dependencies => []
                                           }
            next
        end

        pkg_build_options = build_options.dup
        pkg_build_options[:debian_package_name] = packager.debian_ruby_name(pkg,true)
        gem_deps = nil
        if version = required_gems_versions[pkg]
            pkg_build_options[:package_version] = version
            gem_deps = package_info_ask.all_required_gems({pkg => [version]})
        else
            gem_deps = package_info_ask.all_required_gems({pkg => []})
        end

        gem_deps = gem_deps[:gem_versions].to_a.select do |gem,versions|
            pkg_ruby_name = packager.debian_ruby_name(gem, false)
            pkg_prefixed_name = packager.debian_ruby_name(gem, true)

            !( packager.rock_release_platform.ancestorContains(gem) ||
               packager.rock_release_platform.ancestorContains(pkg_ruby_name) ||
               packager.rock_release_platform.ancestorContains(pkg_prefixed_name))
        end .map { |p| "ruby-#{p[0]}" }
        #rice requires itself
        gem_deps.delete_if { |p| p == "ruby-#{pkg}" }
        
        pending_jobs["ruby-#{pkg}"] = { :type => :gem,
                                        :dependencies => gem_deps,
                                        :build_arguments =>
                                        [pkg, pkg_build_options],
                                        :version => version
                                      }
    end
end

if !rock_pkginfos || rock_pkginfos.empty?
elsif o_meta_only
else
    rock_pkginfos.each do |pkginfo|
        if package_info_ask.ignored?(pkginfo.name)
            Apaka::Packaging.warn "package #{pkginfo.name} is on the ignore list"
            next
        end

        pkgdeps = {:rock_pkginfo => [], :nonnative => []}
        if not o_no_deps
            pkgdeps = pkginfo.dependencies
        end

        pkg_build_options = build_options.dup
        pkg_build_options[:debian_package_name] = packager.debian_name(pkginfo,true)
        pkg_build_options[:ancestor_blacklist] = ancestor_blacklist.intersection(pkgdeps[:rock_pkginfo]).map { |p| p.name }

        deps = pkgdeps[:rock_pkginfo].select do |pkginfo|
            pkg_name = packager.debian_name(pkginfo, true)
            !packager.rock_release_platform.ancestorContains(pkg_name)
        end .map { |p| p.name }
        deps.concat (
            pkgdeps[:nonnative].select do |gem,version|
                pkg_ruby_name = packager.debian_ruby_name(gem, false)
                pkg_prefixed_name = packager.debian_ruby_name(gem, true)

                !( packager.rock_release_platform.ancestorContains(gem) ||
                   packager.rock_release_platform.ancestorContains(pkg_ruby_name) ||
                   packager.rock_release_platform.ancestorContains(pkg_prefixed_name))
            end .map { |p| "ruby-#{p[0]}" })
        
        pending_jobs[pkginfo.name] = { :type => :package,
                                       :dependencies => deps,
                                       :build_arguments =>
                                       [pkginfo.name, pkg_build_options]
                                     }
    end
end

meta_packages.each do |pkg_name,dependencies|
    pkg_build_options = build_options.dup
    pkg_build_options[:debian_package_name] = packager.debian_meta_name(pkg_name,true)

    reqpkgs = packager.filter_all_required_packages package_info_ask.all_required_packages dependencies,[]

    pkg_build_options[:meta_depends] = dependencies.to_a
    pkg_build_options[:ancestor_blacklist] = ancestor_blacklist.intersect(reqpkgs[:pkginfos]).map { |p| p.name }

    deps = reqpkgs[:pkginfos].select do |pkginfo|
        dep_pkg_name = packager.debian_name(pkginfo, true)
        !packager.rock_release_platform.ancestorContains(dep_pkg_name)
    end .map { |p| p.name }
    deps.concat (
        reqpkgs[:gem_versions].select do |gem,version|
            pkg_ruby_name = packager.debian_ruby_name(gem, false)
            pkg_prefixed_name = packager.debian_ruby_name(gem, true)

            !( packager.rock_release_platform.ancestorContains(gem) ||
               packager.rock_release_platform.ancestorContains(pkg_ruby_name) ||
               packager.rock_release_platform.ancestorContains(pkg_prefixed_name))
        end .map { |p| "ruby-#{p[0]}" }
    )

    pending_jobs[pkg_name] = { :type => :meta,
                               :dependencies => deps,
                               :build_arguments =>
                               [pkg_name, pkg_build_options]
                             }
end

succeeded_gem_builds = []
failed_gem_builds = []
gem_index = 0
succeeded_pkg_builds = []
failed_pkg_builds = []
pkg_index = 0
succeeded_meta_builds = []
failed_meta_builds = []
meta_index = 0
status = {}
if !required_gems || required_gems.empty?
    Apaka::Packaging.info "# No Gems to be packaged"
end
if !rock_pkginfos || rock_pkginfos.empty?
    Apaka::Packaging.info "# No Rock Packages to be packaged"
end
if o_meta_only
    Apaka::Packaging.info "# Creating only meta packages requested"
end

wait_queue = Queue.new

#validate sudo credentials while we are still single threaded
if !o_dry_run
    system("sudo","-v")
end

while !pending_jobs.empty? || !running_jobs.empty?
    #first, remove all jobs depending on failed jobs
    pending_jobs.delete_if do |k,v|
        if !v[:dependencies].select { |p| failed_jobs[p] || skipped_jobs[p] }.empty?
            Apaka::Packaging.info "Skipping #{k} due to failed dependencies"
            skipped_jobs[k] = v
            true
        else
            false
        end
    end
    made_progress = false
    # find a job where all dependencies are in finished_jobs
    pending_jobs.delete_if do |pkg,job|
        if running_jobs.length > o_max_parallel_jobs
            false
        elsif job[:dependencies].reject { |p| finished_jobs[p] }.empty?
            #found one. run it.
            if job[:type] == :gem
                job[:index] = gem_index
                puts "    gem (#{job[:index]}) #{pkg}"
                gem_index += 1
            elsif job[:type] == :package
                job[:index] = pkg_index
                puts "    package (#{job[:index]}) #{pkg}"
                pkg_index += 1
            elsif job[:type] == :meta
                job[:index] = meta_index
                puts "    meta (#{job[:index]}) #{pkg}"
                meta_index += 1
            end
            job[:thread] = Thread.new do
                begin
                    if !o_dry_run
                        build_locally(packager, *job[:build_arguments])
                    end
                    job[:success] = true
                rescue SignalException => e
                    puts "Package building aborted by user"
                    puts e.message
                    puts e.backtrace.join("\n")
                rescue Exception => e
                    puts "    package: #{pkg} building failed"
                    puts e.message
                    puts e.backtrace.join("\n")
                    job[:success] = false
                ensure
                    wait_queue.push job
                end
            end
            running_jobs[pkg] = job
            made_progress = true
            true
        else
            false
        end
    end
    if running_jobs.empty? && !pending_jobs.empty?
        Apaka::Packaging.error "Remaining (pending) packages which unsatisfied dependencies:"
        pending_jobs.each do |pkg,job|
            Apaka::Packaging.error "#{pkg}: #{job[:dependencies].join(", ")}"
        end
        exit 1
    end
    if !made_progress && !running_jobs.empty?
        #could not add more jobs, so wait for one to finish.
        # bound the time we are waiting for jobs to complete so we can
        # refresh the sudo credentials
        begin
            Timeout::timeout(180) do
                # the job returned by .pop will be removed from running_jobs below,
                # if it is not already.
                wait_queue.pop
            end
        rescue Timeout::Error
            # we don't really care, we just want to wait until something happens
            # or needs to be done, then we check what/if something happened and
            # do the deed.
        rescue Interrupt
            # we want to get all our threads stopped in a reasonable way.
            # but first, clear out pending_jobs
            puts "Aborting."
            puts "Packages waiting for build to start: #{pending_jobs.keys}"
            pending_jobs.clear
            running_jobs.each do |pkg,job|
                puts "Killing worker for #{pkg}"
                job[:thread].raise Interrupt
                job[:thread].join
            end
            running_jobs.clear
            puts "Exiting."
            exit 2
        end
        if !o_dry_run
            system("sudo","-v")
        end
    end
    running_jobs.delete_if do |pkg,job|
        if !job[:thread].alive?
            if job[:success]
                finished_jobs[pkg] = job
                if job[:type] == :gem
                    succeeded_gem_builds << [job[:index], pkg, job[:version]]
                    status['gems'] = { :succeeded => succeeded_gem_builds,
                                           :failed => failed_gem_builds }
                elsif job[:type] == :package
                    succeeded_pkg_builds << [job[:index], pkg]
                    status['packages'] = { :succeeded => succeeded_pkg_builds,
                                           :failed => failed_pkg_builds }
                elsif job[:type] == :meta
                    succeeded_meta_builds << [job[:index], pkg]
                    status['meta'] = { :succeeded => succeeded_meta_builds,
                                       :failed => failed_meta_builds }
                end
            else
                failed_jobs[pkg] = job
                if job[:type] == :gem
                    failed_gem_builds << [job[:index], pkg, job[:version]]
                    status['gems'] = { :succeeded => succeeded_gem_builds,
                                           :failed => failed_gem_builds }
                elsif job[:type] == :package
                    failed_pkg_builds << [job[:index], pkg]
                    status['packages'] = { :succeeded => succeeded_pkg_builds,
                                           :failed => failed_pkg_builds }
                elsif job[:type] == :meta
                    failed_meta_builds << [job[:index], pkg]
                    status['meta'] = { :succeeded => succeeded_meta_builds,
                                       :failed => failed_meta_builds }
                end
            end
            
            File.write(File.join(log_dir,'deb_local-build_results.yml'), status.to_yaml)
            true
        else
            false
        end
    end
end

puts "Gem building succeeded for: #{succeeded_gem_builds}"
puts "Pkg building succeeded for: #{succeeded_pkg_builds}"
puts "Meta building succeeded for: #{succeeded_meta_builds}"
puts ""
puts "Gem building failed for: #{failed_gem_builds}"
puts "Pkg building failed for: #{failed_pkg_builds}"
puts "Meta building failed for: #{failed_meta_builds}"


