#! /usr/bin/env ruby
# coding: utf-8
require 'apaka'

# Prevent deb_package from parallel execution since autoproj configuration loading
# does not account for parallelism
lock_file = File.open("/tmp/deb_package.lock",File::CREAT)
Apaka::Packaging.debug "deb_package: waiting for execution lock"
lock_time = Time.now
lock_file.flock(File::LOCK_EX)
lock_wait_time_in_s = Time.now - lock_time
Apaka::Packaging.debug "deb_package: execution lock acquired after #{lock_wait_time_in_s} seconds"

package_info_ask = Apaka::Packaging::PackageInfoAsk.new(:detect, Hash.new())
Apaka::Packaging.root_dir = package_info_ask.root_dir

o_architectures = []
o_distributions = []
o_skip = false
o_build_dir = nil
o_dest_dir = nil
o_patch_dir = nil
o_rebuild = false
o_use_remote_repository = false
o_ps_dir = nil
o_job = false
o_job_name = nil
o_job_cleanup = false
o_job_cleanup_all = false
o_job_remove = false
o_job_remove_all = false
o_flow = nil
o_ruby_job = nil
o_package = false
o_meta = nil
o_overwrite = false
o_osdeps_list_dir = nil
o_flavor="master"
if ENV.has_key?('AUTOPROJ_CURRENT_ROOT')
    o_flavor = ENV['AUTOPROJ_CURRENT_ROOT'].split('/')[-1]
end
o_rock_base_install_dir=nil
o_parallel_builds = false
o_control_job = false
o_all_control_jobs = false
o_exists = false
o_rock_release_name = nil
o_package_version = nil
o_build_local = false
o_install = false
o_recursive = false
o_show_config = false
o_create_cleanup_jobs = false
o_activation_status=false
o_config_file = nil
o_ancestor_blacklist_pkgs = Set.new

if ARGV.empty?
    ARGV << "--help"
end

options = OptionParser.new do |opt|
    opt.banner = "Usage: deb_package [options]"
    opt.on('--skip', 'Skip existing packages') do
        o_skip = true
    end
    opt.on("--dest-dir DIR", String, "Destination Folder of the source-package") do |dir|
        o_dest_dir = File.expand_path(dir)
        if !File.directory?(o_dest_dir)
            puts "Given destination directory '#{o_dest_dir}' does not exist"
            exit -1
        end
    end
    opt.on("--build-dir DIR", String, "Build Folder of the source package -- needs to be within an autoproj installation") do |dir|
        o_build_dir = File.expand_path(dir)
        if !File.directory?(o_build_dir)
            FileUtils.mkdir_p(o_build_dir)
        end
    end
    opt.on("--patch-dir DIR", String, "Overlay directory to patch existing packages (and created gems) during the packaging process") do |dir|
        o_patch_dir = File.expand_path(dir)
        if !File.directory?(o_patch_dir)
            puts "Given patch directory '#{o_patch_dir}' does not exist"
            exit -1
        end
    end

    opt.on("--[no-]verbose", "display output of commands on stdout") do |v| Autobuild.verbose = v end
    opt.on("--[no-]debug", "debug information (for debugging purposes)") do |v| Autobuild.debug = v end

    opt.on("--rebuild", "rebuild package") do
        o_rebuild = true
    end

    opt.on("--use-remote-repository","don't use local repository, but import from known remote") do
        o_use_remote_repository = true
    end
    opt.on("--package-set-dir DIR", String, "Directory with the binary-package set to update") do |dir|
        o_ps_dir = dir
        if !File.directory?(o_ps_dir)
            puts "Given source directory '#{o_ps_dir}' does not exist"
            exit -1
        end
    end
    opt.on("--create-job", "Create jenkins-jobs") do
        o_job = true
    end
    opt.on("--create-ruby-job", "Create jenkins-ruby-job") do
        o_ruby_job = true
    end
    opt.on("--create-flow-job name", String, "Create the jenkins-FLOW-job") do |name|
        o_flow = name
        if o_flow.nil? or o_flow == ""
            puts "no jobname given"
            exit -1
        end
    end
    opt.on("--cleanup-job name", String, "Cleanup jenkins-job") do |name|
        o_job_cleanup = true
        o_job_name = name
        if o_job_name.nil? or o_job_name.empty?
            puts "no jobname given"
            exit -1
        end
    end
    opt.on("--remove-job name", String, "Remove jenkins-job") do |name|
        o_job_remove = true
        o_job_name = name
        if o_job_name.nil? or o_job_name.empty?
            puts "no jobname given"
            exit -1
        end
    end
    opt.on("--create-cleanup-jobs", "Create cleanup jobs") do
        o_create_cleanup_jobs = true
    end
    opt.on("--cleanup-all-jobs", "Cleanup all jenkins jobs") do
        o_job_cleanup_all = true
    end
    opt.on("--remove-all-jobs", "Remove all jenkins jobs except flow- and control-jobs (a_/0_)") do
        o_job_remove_all = true
    end
    opt.on("--create-control-job name", "Create control-job named 0_<name>") do |name|
        o_control_job = name
    end
    opt.on("--create-control-jobs", "Create all control-jobs in the templates-folder") do
        o_all_control_jobs = true
    end
    opt.on("--architectures ARCHS", String, "Comma separated list of architectures to build for") do |architectures|
        o_architectures = architectures.delete(" ").split(/[,;]/)
    end
    opt.on("--distributions DISTS", String, "Comma separated list of distributions to build for") do |distributions|
        o_distributions = distributions.delete(" ").split(/[,;]/)
    end
    opt.on("--package", "Create choosen packages") do
        o_package = true
    end
    opt.on("--meta NAME", "Create a meta package for the chosen packages") do |name|
        o_meta = name
    end
    opt.on("--overwrite", "Overwrite existing Jenkins Jobs (History-loss!)") do
        o_overwrite = true
    end
    opt.on("--parallel", "Build jenkins-jobs in parallel, might be more unstable but much faster. Only useful with --create-flow-job") do
        o_parallel_builds = true
    end
    opt.on("--flavor name", "Use a specific flavor (defaults to directory-name)") do |name|
        if not (o_flavor.nil? or o_flavor == "")
            o_flavor = name
        end
    end
    opt.on("--update-list FILE", String, "Update the osdeps file in the given directory") do |file|
        puts "The usage of --update-list is deprecated, use --update-osdeps-lists instead"
        exit 0
    end
    opt.on("--update-osdeps-lists DIR", String, "Update the osdeps files in the given directory") do |dir|
        o_osdeps_list_dir = dir
    end
    opt.on("--rock-base-install-dir DIR", String, "Rock base installation directory (prefix) for deployment of debian packages") do |dir|
        require 'pathname'
        if !Pathname.new(dir).absolute?
            raise ArgumentError, "Given path for --rock-base-install-dir has to be absolute, but was relative: '#{dir}'"
        end
        o_rock_base_install_dir = dir
    end
    opt.on("--release-name NAME", String, "Release name for the generated set of packages -- debian package will be installed in a subfolder with this name in base dir") do |name|
        o_rock_release_name = name
    end
    opt.on("--exists TUPLE", String, "Test availablility of a package in a given distribution <distribution>,<package_name>") do |distro_pkg|
        o_exists = distro_pkg.delete(" ").split(/[,;]/)
    end
    opt.on("--package-version VERSION", String, "The version requirement for the package to install use 'noversion' if no specific version is required, but option needs to be present") do |version|
        if version != "noversion"
            # Since the version might be, e.g. <=1.0.3 it has to be
            # escaped for the job description:
            #     --package-version &lt;=1.0.3
            # Here we make sure it is unescaped for further processing
            require 'cgi'
            o_package_version = CGI.unescapeHTML(version)
        end
    end
    opt.on("--build-local", String, "Build a debian-package locally and without Buildserver (Jenkins)") do
        o_build_local = true
    end
    opt.on("--install", String, "Build an environment up to the given package based on debian-packages") do
        o_install = true
    end
    opt.on("--recursive", String, "package and/or build packages with their recursive dependencies") do
        o_recursive = true
    end
    opt.on("--config-file CONFIG",String, "Read configuration file") do |file|
        o_config_file = File.expand_path(file)
	if !File.exists?(o_config_file)
            puts "--config-file option incorrect: file '#{file}' does not exist"
            exit 1
	end
    end

    opt.on("--show-config", "Show the current configuration") do
        o_show_config = true
    end
    opt.on("--activation-status","Check the configuration setting for building thi particular distribution and release combination") do
        o_activation_status = true
    end

    opt.on("--ancestor-blacklist-package PACKAGENAME","Add a package to the ancestor blacklist, i.E. if needed as dependency, use a package from current release name instead of an ancestor release") do |pkgname|
        o_ancestor_blacklist_pkgs << pkgname
    end
end

# The remaining arguments are the packages that have been selected on console
# only these ones should be considered
o_selected_packages = options.parse(ARGV)

Apaka::Packaging::Config.reload_config(o_config_file, o_rock_release_name)

if o_show_config
    Apaka::Packaging::Config
end

if o_activation_status
    distribution = o_distributions.first
    architecture = o_architectures.first

    if Apaka::Packaging::Config.architectures.include?(architecture) &&
        Apaka::Packaging::Config.architectures[architecture].include?(distribution)
        puts "active"
        exit 0
    else
        puts "inactive"
        exit 0
    end
end

if o_package_version && o_selected_packages.size != 1
    raise ArgumentError, "Cannot use package-version with multiple packages as argument"
end
################################################################################

if o_create_cleanup_jobs
    Apaka::Packaging::Debian.create_cleanup_jobs
    exit 0
end

if o_job_cleanup && o_job_name
    Apaka::Packaging::Debian.cleanup_job(o_job_name)
    exit 0
end

if o_job_cleanup_all
    Apaka::Packaging::Debian.cleanup_all_jobs
    exit 0
end

if o_job_remove && o_job_name
    Apaka::Packaging::Debian.remove_job(o_job_name)
    exit 0
end

if o_job_remove_all
    Apaka::Packaging::Debian.remove_all_jobs
    exit 0
end

if o_exists
    begin
        if Apaka::Packaging::Distribution::containsPackage(o_exists[0], o_exists[1])
            puts "Package #{o_exists[1]} exists in distribution #{o_exists[0]}"
            exit 0
        else
            puts "Package #{o_exists[1]} does not exist in distribution #{o_exists[0]}"
            exit 1
        end
    rescue ArgumentError => e
        puts "Please provide a valid distribution name -- #{e}"
        exit -1
    end
end

=begin
# basiert auf /opt/rock/master/.gems/gems/autoproj-1.13.2/lib/autoproj/manifest.rb Zeile 834
# Umgeht das Problem, dass Autoproj über CmdLine nur die ausgewählten Pakete gibt (also alle Pakete des Paketsets + speziell ausgewählte) nicht aber deren Abhängigkeiten

# selection muss ein set sein??
result = Set.new
selection.each do |pkg_name|
    Autobuild::Package[pkg_name].all_dependencies(result)
end

selection = result | selection # -> union
=end

options = Hash.new

puts "Using configuration:\n#{Apaka::Packaging::Config}"

if o_distributions.size == 1
    distribution = o_distributions[0]
    operating_system = []
    preferred_ruby_version = nil
    if Apaka::Packaging::Config.linux_distribution_releases.has_key?(distribution)
        operating_system = Apaka::Packaging::Config.linux_distribution_releases[ distribution ]
    else
        raise InvalidArgument, "Custom setting of operating system to: #{distribution} is not supported"
    end

    if Apaka::Packaging::Config.preferred_ruby_version.has_key?(distribution)
        preferred_ruby_version = Apaka::Packaging::Config.preferred_ruby_version[ distribution ]
    end

    if !operating_system.empty?
        package_info_ask.osdeps_operating_system = operating_system
        puts "Custom setting of operating system to: #{operating_system}"
        if preferred_ruby_version
            package_info_ask.osdeps_set_alias(preferred_ruby_version,"ruby")
            puts "Setting preferred ruby version: #{preferred_ruby_version}"
        end
    end
end

if !o_distributions.empty?
    options[:distribution] = o_distributions.first
end
if !o_architectures.empty?
    options[:architecture] = o_architectures.first
end
Apaka::Packaging::TargetPlatform.osdeps_release_tags= package_info_ask.osdeps_release_tags
packager = Apaka::Packaging::Debian.new(options)

packager.rock_autobuild_deps[:orogen] = [ package_info_ask.pkginfo_from_pkg(package_info_ask.package_by_name("orogen")) ]

#if the name matches a move target directory, convert to package name
o_selected_packages = o_selected_packages.map do |name|
    package_info_ask.moved_packages.each do |pkg_name,target_dir|
        if name == target_dir
            name = pkg_name
        end
    end
    name
end

selected_gems = []
selected_rock_packages = o_selected_packages.select do |name|
    if package_info_ask.package(name)
        Apaka::Packaging.warn "Package: #{name} is a known rock package"
        true
    elsif Apaka::Packaging::GemDependencies::is_gem?(name)
        Apaka::Packaging.warn "Package: #{name} is a gem"
        selected_gems << [name, o_package_version]
        false
    else
        true
    end
end

Apaka::Packaging.info "selected_packages: #{o_selected_packages} --> rock_packages: #{selected_rock_packages}, gems: #{selected_gems}"
selection = package_info_ask.autoproj_init_and_load(selected_rock_packages)
selection = package_info_ask.resolve_user_selection_packages(selection)

packager.prepare

if o_build_dir
    packager.build_dir = o_build_dir
end

if o_rock_base_install_dir
    packager.rock_base_install_directory = o_rock_base_install_dir
end
if o_rock_release_name
    packager.rock_release_name = o_rock_release_name
end

Apaka::Packaging::TargetPlatform::ancestor_blacklist = o_ancestor_blacklist_pkgs.map do |pkg_name|
    pkginfo = package_info_ask.pkginfo_from_pkg(package_info_ask.package_by_name(pkg_name))
    packager.debian_name(pkginfo, false)
end.to_set

# Make sure that when we request a package build we only get this one,
# and not the pattern matched to other packages, e.g. for orogen
selection = selection.select do |pkg_name, i|
    if o_selected_packages.empty? or o_selected_packages.include?(pkg_name)
        Apaka::Packaging.info "Package: #{pkg_name} is in selection"
        true
    else
        false
    end
end

sync_packages = []

Dir.chdir(packager.build_dir) do

    if o_package
        Autobuild.do_update = true

        selected_gems.each do |pkg_name, version|
            Apaka::Packaging.info "Converting ruby gem: '#{pkg_name}'"
            # Fails to be detected as normal package
            # so we assume it is a ruby gem
            packager.convert_gems([ [pkg_name, version] ], {:force_update => o_rebuild, :patch_dir => o_patch_dir})

            debian_pkg_name = packager.debian_ruby_name(pkg_name)
            sync_packages << debian_pkg_name
        end

        selection.each_with_index do |pkg_name, i|
            if pkg = package_info_ask.package(pkg_name)
                pkg = pkg.autobuild
                Apaka::Packaging.warn "Package: #{pkg_name} is a known rock package"
            else
                Apaka::Packaging.warn "Package: #{pkg_name} is not a known rock package (but maybe a ruby gem?)"
                next
            end

            pkginfo = package_info_ask.pkginfo_from_pkg(pkg)

            if o_skip && o_obs_dir
                pkg_obs_dir = File.join(o_obs_dir, Apaka::Packaging::Packager.obs_package_name(pkginfo))
                if File.directory?(pkg_obs_dir)
                    puts "skipping existing package #{pkg_name} (#{i + 1}/#{selection.size})"
                    next
                end
            end

            puts "packaging #{pkg_name} (#{i + 1}/#{selection.size})"
            # Making sure all packages that require base/cmake due to using Rock CMake macros have
            # a dependency on base/cmake
            if File.file?(File.join(pkg.srcdir, "CMakeLists.txt"))
                cmakelists_txt = File.read(File.join(pkg.srcdir, "CMakeLists.txt"))
                if cmakelists_txt =~ /include\(Rock\)|Rock\.cmake/ || cmakelists_txt =~ /find_package\(Rock\)/
                    pkg.depends_on "base/cmake" unless pkg.name == "base/cmake"
                end
            end

            begin
                options = {:force_update => o_rebuild, :patch_dir => o_patch_dir, :package_set_dir => o_ps_dir}
                if !o_use_remote_repository
                    options[:existing_source_dir] = pkg.srcdir
                end
                # just to update the required gem property
                selected_gems.concat pkginfo.dependencies[:extra_gems]

                packager.package(pkginfo, options)

                debian_pkg_name = packager.debian_name(pkginfo)
                sync_packages << debian_pkg_name
            rescue Interrupt
                raise
            rescue Exception => e
                puts "failed to package #{pkg.name}: #{e.message} #{e.backtrace}"
                next
            end
        end
        selected_gems.uniq!
    end

    if o_meta
        #get the package names
        meta_depend_packages = []

        selected_gems.each do |pkg_name, version|
            debian_pkg_name = packager.debian_ruby_name(pkg_name)
            puts "ruby gem: #{debian_pkg_name}"
            meta_depend_packages << debian_pkg_name
        end

        selection.each do |pkg_name|
            if pkg = package_info_ask.package(pkg_name)
                pkg = pkg.autobuild
                Apaka::Packaging.warn "Package: #{pkg_name} is a known rock package"
            else
                Apaka::Packaging.warn "Package: #{pkg_name} is not a known rock package (but maybe a ruby gem?)"
                next
            end

            pkginfo = package_info_ask.pkginfo_from_pkg(pkg)

            meta_depend_packages << packager.debian_name(pkginfo)
        end

        #create the meta package
        if meta_depend_packages.empty?
            puts "Meta package #{o_meta} requested with no dependencies"
        elsif pkg = package_info_ask.package(o_meta)
            puts "Meta package #{o_meta} is a known rock package"
        else
            #maybe let the packager handle the name conversion
            debian_pkg_name = packager.debian_meta_name(o_meta)
            puts "Meta package #{o_meta} is going to be called #{debian_pkg_name}"
            puts "Package #{debian_pkg_name} depends on #{meta_depend_packages.join(", ")}"

            #now create a source package with only the debian directory.
            #we need to populate it with at least
            #changelog, compat, control, copyright, rules

            begin
                # Only account for packages which are actually available
                dependencies = meta_depend_packages.select do |pkg|
                    packager.reprepro_has_package?(pkg, o_rock_release_name, distribution, o_architectures.first)
                end

                packager.package_meta(o_meta, dependencies, {:force_update => o_rebuild, :patch_dir => o_patch_dir, :package_set_dir => o_ps_dir})

                sync_packages << debian_pkg_name
            rescue Interrupt
                raise
            rescue Exception => e
                puts "failed to package #{o_meta}:"
                puts "#{e.message}"
                e.backtrace.each { |b| puts b }
                next
            end
        end
    end

    if o_job

        options = Hash.new
        if !o_architectures.empty?
            options[:architectures] = o_architectures
        end
        if !o_distributions.empty?
            options[:distributions] = o_distributions
        end

        # allow general parametrization for jobs
        packager.rock_release_name = "$release"

        jenkins = Apaka::Packaging::Jenkins.new(packager, package_info_ask)

        packages = package_info_ask.all_required_rock_packages(selection, selected_gems)
        if packager.rock_release_name
            packages = packages.select do |pkg|
                pkginfo = package_info_ask.pkginfo_from_pkg(pkg)
                pkg_name = packager.debian_name(pkginfo, true || with_prefix)
                !packager.rock_release_platform.ancestorContains(pkg_name)
            end
        end
        if selection.size == 1
            pkg = packages.last
            puts "Creating Jenkins-job: #{pkg.name} -- #{pkg}"
            options[:force] = o_overwrite
            extras = jenkins.create_package_job(pkg, options)
            selected_gems.concat extras[:extra_gems]
        else
            packages.each_with_index do |pkg, i|
                puts "(#{i+1}/#{packages.size}) Creating Jenkins-job: #{pkg.name} -- #{pkg}"
                options[:force] = o_overwrite
                extras = jenkins.create_package_job(pkg, options)
                selected_gems.concat extras[:extra_gems]
            end
        end

        selected_gems.uniq!
    end

    if o_flow
        jenkins = Apaka::Packaging::Jenkins.new(packager, package_info_ask)

        puts "Creating FLOW-Job"
        options = { :force => o_overwrite }
        extras = jenkins.create_flow_job(o_flow, selection, selected_gems, o_flavor, options)
        selected_gems.concat extras[:extra_gems]
        selected_gems.uniq!
    end

    if o_control_job
        puts "Creating Control-Job (0_)"
        options = { :force => o_overwrite }
        Apaka::Packaging::Jenkins.create_control_job("0_" + o_control_job, options)
    end

    if o_all_control_jobs
        puts "Creating all Control-Jobs (0_)"
        options = { :force => o_overwrite }
        Apaka::Packaging::Jenkins.create_control_jobs options
    end

    # Updating the osdeps files in a given directory
    if o_osdeps_list_dir
        if not o_rock_release_name
            puts "Please specify a release name with the --release-name option to generate the corresponding list of available osdeps"
            exit -1
        end

        puts "Updating osdep-lists: #{o_selected_packages} in directory #{o_osdeps_list_dir}"
        all_packages = packager.filter_all_required_packages(package_info_ask.all_required_packages(selection, selected_gems))
        selected_gems.concat all_packages[:extra_gems]
        selected_gems.uniq!

        all_packages[:pkginfos].each do |pkginfo|
            packager.update_osdeps_lists(pkginfo, o_osdeps_list_dir)
        end
        all_packages[:gems].each do |pkg_name|
            pkg = package_info_ask.package(pkg_name)
            if !pkg.nil?
                pkg = pkg.autobuild
                pkginfo = package_info_ask.pkginfo_from_pkg(pkg)
                packager.update_osdeps_lists(pkginfo, o_osdeps_list_dir)
            else
                packager.update_osdeps_lists(pkg_name, o_osdeps_list_dir)
            end
        end
    end

    if o_ruby_job
        if not o_rock_release_name
            # set general parameter for job
            packager.rock_release_name = "$release"
        end

        options = Hash.new
        if !o_architectures.empty?
            options[:architectures] = o_architectures
        end
        if !o_distributions.empty?
            options[:distributions] = o_distributions
        end

        i = 1
        all_packages = packager.filter_all_required_packages(package_info_ask.all_required_packages(selection, selected_gems))
        selected_gems.concat all_packages[:extra_gems]
        selected_gems.uniq!
        all_gems  = all_packages[:gems]

        jenkins = Apaka::Packaging::Jenkins.new(packager, package_info_ask)
        puts "Creating Gem-Jobs for #{all_gems}"

        all_gems.each do |gem_name|
            puts "#{i}/#{all_gems.size} Creating Jenkins-job: #{gem_name}"
            options[:job_name] = gem_name
            options[:version] = "noversion" # default use no version
            options[:force] = o_overwrite
            jenkins.create_ruby_job(gem_name, options)
            i = i+1
        end
    end

    if o_dest_dir && o_package
        sync_packages.each do |debian_pkg_name|
            # sync the directory in build/debian and the target directory based on an existing
            # files pattern


            files = []
            packager.file_suffix_patterns.map do |p|
                # Finding files that exist in the source directory
                # needs to handle ruby-hoe_0.20130113/*.dsc vs. ruby-hoe-yard_0.20130113/*.dsc
                # and ruby-hoe/_service
                glob_exp = File.join(packager.build_dir,debian_pkg_name,"*#{p}")
                files += Dir.glob(glob_exp)
            end
            files = files.flatten.uniq
            dest_dir = File.join(o_dest_dir, debian_pkg_name)

            FileUtils.mkdir_p dest_dir
            FileUtils.cp files, dest_dir
        end
    end

    if o_build_local
        begin
            selected_gems.each do |gem_name, gem_version|
                pkg = package_info_ask.package(gem_name)
                options =  {:distributions => o_distributions, :verbose => Autobuild.verbose}
                if pkg && pkg.autobuild
                    options[:parallel_build_level] = pkg.autobuild.parallel_build_level
                end
                filepath = packager.build_local_gem gem_name, options 
                puts "Debian package created for gem '#{gem_name}': " + filepath
                if o_dest_dir
                    puts "Copying debian package to destination folder: #{dest_dir}"
                    FileUtils.mkdir_p dest_dir
                    FileUtils.cp filepath, dest_dir
                end
            end

            selection.each_with_index do |pkg_name, i|
                if pkg = package_info_ask.package(pkg_name)
                    pkg = pkg.autobuild
                else
                    Apaka::Packaging.warn "Package: #{pkg_name} is not a known rock package (but maybe a ruby gem?)"
                    next
                end

                pkginfo = package_info_ask.pkginfo_from_pkg(pkg)
                filepath = packager.build_local_package pkginfo, :distributions => o_distributions, :verbose => Autobuild.verbose
                puts "Debian package created for package '#{pkg}': #{filepath}"
                if o_dest_dir
                    puts "Copying debian package to destination folder: #{dest_dir}"
                    FileUtils.mkdir_p dest_dir
                    FileUtils.cp filepath, dest_dir
                end
            end
        rescue Exception => e
            Apaka::Packaging.warn "Local build failed: #{e}"
            puts e.backtrace
            exit 10
        end
    end

    if o_install
        begin
            selected_gems.each do |gem_name, gem_version|
                is_osdeps = false
                native_name, is_osdeps = packager.native_dependency_name(gem_name)
                if !is_osdeps
                    puts "Installing locally: '#{gem_name}'"
                    debian_name = packager.debian_ruby_name(gem_name, true)
                    packager.install debian_name, :distributions => o_distributions
                else
                    puts "Package '#{gem_name}' is available as os dependency: #{native_name}"
                end
            end
            selection.each_with_index do |pkg_name, i|
                if pkg = package_info_ask.package(pkg_name)
                    pkg = pkg.autobuild
                else
                    Apaka::Packaging.warn "Package: #{pkg_name} is not a known rock package (but maybe a ruby gem?)"
                    next
                end
                pkginfo = package_info_ask.pkginfo_from_pkg(pkg)
                debian_name = packager.debian_name(pkginfo)

                puts "Installing locally: '#{pkg.name}'"
                packager.install debian_name, :distributions => o_distributions, :verbose => Autobuild.verbose
            end
        rescue Exception => e
            puts "Local install failed: #{e}"
            exit 20
        end
    end

    packager.cleanup
end # Dir.chdir
