#!/bin/bash

##============================== *** DESCRIPTION apaka-make-deb *** ===============================##
##                                                                                                 ##
##      Script for automated debian packaging based on a given autoproj based workspace.           ##
##      Provide the absolute path (may include ~) to the designated working directory!             ##
##      ( May be executed from anywhere.. )                                                        ##
##                                                                                                 ##
##      Execution: bash apaka-make-deb --dir absolute_path_WD --release name                       ##
##          Example: bash apaka-make-deb --dir ~/mantis_dev --release mantis-19.05                 ##
##                                                                                                 ##
##          Alternative: make file executable with >> chmod +x apaka-make-deb <<                   ##
##                       execute >> ./apaka-make-deb [required arguments] [options] <<             ##
##                                                                                                 ##
##      Available flags:                                                                           ##
##          required:                                                                              ##
##              --dir path                                                                         ##
##                       --> set working directory.                                                ##
##              --release argument                                                                 ##
##                       --> set release name                                                      ##
##                                                                                                 ##
##          optional:                                                                              ##
##              --help   --> print this dialog                                                     ##
##              --nomake --> skip the update and building of apaka                                 ##
##              --clean  --> clean up working directory                                            ##
##                                                                                                 ##
##              --architecture argument                                                            ##
##                       --> set architecture [current default = autodetect build system]          ##
##              --distribution argument                                                            ##
##                       --> set distribution [current default = autodetect build system]          ##
##              --package argument                                                                 ##
##                       --> build only this package                                               ##
##              --osdeps                                                                           ##
##                       --> generate osdeps file                                                  ##
##                           (will only be executed if packaging is successful)                    ##
##                                                                                                 ##
##                                                                                                 ##
##      ~~~ Architecture and distribution are autodetected. Use flag for user definition ~~~       ##
##      ~~ deb_patches is used by default. Edit last line of file for different behaviour ~~       ##
##=================================================================================================##

# =============================================  TODOS  =========================================== #

# - check architecture and distribution flags for valid arguments!
# - multiple package support
# - autogenerate key and sign release!

# ==========================================  ESSENTIALS  ========================================= #

# kill script execution of the entire script upon Ctrl-C
trap "exit" INT
# catch any occuring error, kill script and print info
set -e
err() {
    echo "Error occurred:"
    awk 'NR>L-4 && NR<L+4 { printf "%-5d%3s%s\n",NR,(NR==L?">>>":""),$0 }' L=$1 $0
}
trap 'err $LINENO' ERR
# ========================================= DEFAULT VALUES  ======================================= #

build=true # ?run aup apaka && amake apaka
osdeps=false
dir=''

release=""
architecture=""
distribution=""
package=""

# ===========================================  FUNCTIONS  ========================================= #
# print help dialog
function print_usage() {
  head -41 ${0##*/} | sed 1,1d
}

# check argument
function checkArg() {
  if [[ "$2" == "--"* ]]; then
    echo "ERROR: No valid argument for $1 flag."
    echo "HINT: Use --help flag to see usage"
  else
    echo "INFO: For $(echo $1 | cut -d'-' -f3) using $2"
    case "$1" in
      "--release"         ) release="--release $2";;
      "--architecture"    ) architecture="--architecture $2";;
      "--distribution"    ) distribution="--distribution $2";;
      "--package"         ) package="$2";;
      * ) echo "ERROR: This error should never occur! Please check code.."; exit 1;;
    esac
  fi
}

# set working directory
function setDir() {
  if [ -d "$1" ]; then #&& [ -d "$1/autoproj" ]; then
    echo "INFO: Setting working directory to $1"
    dir=$1
  else
    echo "ERROR: The set working directory is not a valid directory or does not contain an autoproj directory."
    exit 1
  fi
}

# clean working directory
function cleanDir {
  if [ -d $dir ]; then
    echo "INFO: Cleaning up working directory..";
    if [ -d "$dir/build" ]; then echo "INFO: Removing build directory"; rm -rf $dir/build; fi
    if [ -d "$dir/tools/apaka" ]; then echo "INFO: Removing apaka directory"; rm -rf $dir/tools/apaka; fi
    if [ -d "$dir/deb_patches" ]; then echo "INFO: Removing deb_patches directory"; rm -rf $dir/deb_patches; fi
    if [[ $(cd "$dir/autoproj/" && grep -rc tools/apaka --include=manifest | cut -d':' -f2) -gt 0 ]]; then
      echo "INFO: Resetting autoproj manifest"
      sed -i '/tools\/apaka/d' $dir/autoproj/manifest
    fi
    echo "INFO: Successfully cleaned $dir workspace"
  else
    echo "ERROR: No valid working directory! Check your --dir argument."
    exit 1
  fi
}

function ensureCleaning {
  while true; do
    read -p "PROMPT: Are you sure you want to clean your working directory? This will delete the build directory! [y/n] " confirm
    case $confirm in
      [Yy]* ) cleanDir; exit 1;;
      [Nn]* ) echo "INFO: Abort mission"; exit 1;;
      * ) echo "PROMPT: Please type y or n!";;
    esac
  done
}

# ==========================================  FLAG HANDLER  ======================================= #
# ensure --dir and --release or help flag
if [[ ! $* == *--dir* ]] && [[ ! $* == *--release* ]] && [[ ! $* == *--help* ]]; then
  echo "ERROR: Please make sure that you have provided working directory and release name!"
  echo "       Use --dir and --release flag."
  echo "INFO: Use --help flag for man page."
  exit 1;
elif [[ $* == *--help* ]]; then
  print_usage; exit 1;
fi

# handle flags
while [[ $# -gt 0 ]] && [[ "$1" == --* ]];
do
  opt="$1";
  shift;
  case "$opt" in
    "--dir"            ) setDir $1;shift;;
    "--help"           ) print_usage; exit 1;;
    "--nomake"         ) build=false;;
    "--clean"          ) ensureCleaning;;
    "--release"        ) checkArg $opt $1; shift;;
    "--architecture"   ) checkArg $opt $1; shift;;
    "--distribution"   ) checkArg $opt $1; shift;;
    "--package"        ) checkArg $opt $1; shift;;
    "--osdeps"         ) osdeps=true;;
    * ) echo "ERROR: Wrong flag please use --help flag to see usage:"; exit 1 ;;
  esac
done

# =============================================  MAIN  ============================================ #
{
# source environment
if [ -f "$dir/env.sh" ]; then
  source "$dir/env.sh" && export BASE_LOG_LEVEL="ERROR" && echo "INFO: Sourcing env.sh"
else
  echo "ERROR: Can't source env.sh. No such file."
  exit 1
fi

# clone apaka into directory
if $(git clone https://github.com/rock-core/tools-apaka "$dir/tools/apaka" 2> /dev/null); then
  echo "INFO: Cloned tools/apaka from git"
else
  echo "INFO: tools/apaka already exists. Skip cloning from git repository."
fi

# inject tools/apaka into autoproj/manifest
if [ -f "$dir/autoproj/manifest" ]; then 
  cd "$dir/autoproj"
  if [[ $(grep -rc tools/apaka --include=manifest | cut -d':' -f2) -eq 0 ]]; then
    echo "INFO: Adding tools/apaka to autoproj/manifest"
    lineNumber=$(($(grep -rn layout: --include=manifest | cut -d':' -f2 ) + 1))
    awk -v number=$lineNumber -v line="  - tools/apaka" 'NR == number {print line} {print}' manifest > manifest.new && mv manifest.new manifest
  fi
  cd ..
else
  echo "ERROR: Could not find valid manifest file in autoproj directory."
  exit 1
fi

# update and build apaka
if $build ; then
  aup apaka && amake apaka
else
  echo "INFO: apaka will not be updated nor build due to --nomake flag"
fi

# clone deb_patches into directory
if $(git clone https://github.com/rock-core/tools-apaka-rock_patches.git "$dir/deb_patches" 2> /dev/null); then
  echo "INFO: Cloned deb_patches from git"
else
  echo "INFO: deb_patches already exists. Skip cloning from git repository."
fi

if [ -d "$dir/deb_patches/bagel" ]; then
  echo "INFO: MAINTAIN!! removing bagel deb_patches"
  rm -r $dir/deb_patches/bagel
fi

# prepare and execute packaging
cd $dir
source env.sh && export BASE_LOG_LEVEL="ERROR" 
echo "INFO: Prepare for packaging"
apaka prepare --release-name $release --architecture $architecture --distribution $distribution
echo "INFO: Perform packaging"
apaka build --patch-dir deb_patches --release-name $release --architecture $architecture --distribution $distribution $package
} && {
if $osdeps ; then
  echo "Generating osdep-list of release $release in $dir/build/apaka-packager"
  apaka osdeps --release-name $release --dest-dir $dir
fi
}
