#!/usr/bin/make -f

SHELL := /bin/bash

# BEGIN ENVIRONMENT SETUP
# https://www.debian.org/doc/debian-policy/ch-source.html
# nocheck: This tag says to not run any build-time test suite provided by the package.
export DEB_BUILD_OPTIONS=nocheck

# Setup of $(arch), $(rockruby_libdir) and $(rockruby_archdir)
<%= ruby_arch_setup %>
# Setup of paths: PATH,PKG_CONFIG_PATH,RUBYLIB,...
<%= env_setup %>

# Check if a python command is available and identify the version
# and identify the setup.py file
python_cmd=$(shell command -v python 2> /dev/null)
ifneq ("$(python_cmd)","")
python_version=$(shell python -c 'import sys; print "{0}.{1}".format(sys.version_info[0],sys.version_info[1])')
# Get dirname a setup.py match
python_setup_dir=$(shell find $(DEB_SRCDIR) -name setup.py | tail -n 1 | xargs dirname)
endif

DEB_VERBOSE_ALL=1
include /usr/share/cdbs/1/rules/debhelper.mk
extra_lib_dir=$(shell pwd)/debian/<%= debian_name %>$(rock_install_dir)/lib
apaka_libdeps_dirs=`find $(rock_release_install_dir)/* -type d -name lib -exec echo -n ":{}" \;`
# This argument list is forwarded to dh_shlibdeps which takes the -l option and a colon separated list of libraries
# (note that this is different from the linker arguments)
DEB_DH_SHLIBDEPS_ARGS_ALL=-l$(extra_lib_dir):$(extra_lib_dir)/$(arch):$(rock_library_dirs):${apaka_libdeps_dirs}

debian_install_prefix=$(DEB_DESTDIR)$(rock_install_dir)
rock_doc_install_dir=$(rock_install_dir)/share
SOURCE_ENVSH=for file in `find $(rock_release_install_dir)/*/env.sh ! -empty -type f -name env.sh`; do source "$$file"; done;

pre-build::
	echo "Running pre-build"
	echo "Ruby stats"
	echo "   ruby version: $(ruby_ver)"
	echo "   ruby libdir: $(rockruby_libdir)"
	echo "   ruby archdir: $(rockruby_archdir)"
	# Source the available packages
	echo "Sourcing release packages' env.sh"

# END ENVIRONMENT SETUP
######################################
# BEGIN OROGEN -- This block needs to be executed before CMAKE

<% if package_info.build_type == :orogen %>
	# Making sure orogen is executed before cmake is called
	echo "pre-build: calling orogen in order to generate CMake layout"
	$(SOURCE_ENVSH) $(env_setup) <%= orogen_command %>
	#echo "Current directory including oroGen generated files"
	#find . 
<% end %>

# END OROGEN
######################################
# BEGIN CMAKE
#
<% if package_info.build_type == :cmake || package_info.build_type == :orogen %>
# Defining the cmake command and setting the required enviroment variables
# PKG_CONFIG_PATH Resolve Rock package via pkg-config
# Rock_DIR Set to make sure find_package(Rock) does work
# ROCK_CMAKE_MACROS Used in some patches to set the CMAKE_MODULE_PATH, allowing to find Rock.cmake
CMAKE = $(SOURCE_ENVSH) $(env_setup) cmake
DEB_CMAKE_INSTALL_PREFIX = $(rock_install_dir)

# Debian packaging discourages the use of rpath, but
# cdbs actively sets CMAKE_SKIP_RPATH=ON, so reinforcing OFF here
DEB_CMAKE_EXTRA_FLAGS = -DCMAKE_SKIP_RPATH=OFF
# Telling FindGEM.cmake to search for os packages using pkg-config and not for gems
DEB_CMAKE_EXTRA_FLAGS += -DGEM_OS_PKG=TRUE
# Leaving RUBY_EXECUTABLE unset since it maps to a path of the user executing the upload script
DEB_CMAKE_EXTRA_FLAGS += <%= package_info.cmake_defines.map { |k, v| "-D#{k}=\"#{v}\"" unless "#{k}" == "RUBY_EXECUTABLE" || "#{k}" == "ROCK_TEST_ENABLED" || "#{k}" == "ROCK_TEST_LOG_DIR" }.join(" ") %>
# Disable ROCK Testing -- since running test on the OBS would require proper setting of path, etc. (see. data_processing/type_to_vector)
DEB_CMAKE_EXTRA_FLAGS += -DROCK_TEST_ENABLED=OFF -UROCK_TEST_LOG_DIR
include /usr/share/cdbs/1/class/cmake.mk

# END CMAKE
##########################################
# BEGIN AUTOTOOLS
#
<% elsif package_info.build_type == :autotools %>
DEB_CONFIGURE_PREFIX= $(rock_install_dir)
DEB_CONFIGURE_EXTRA_FLAGS = <%= package_info.extra_configure_flags.join(" ") %>

# use autoreconf: check with external/libply
# use autogen: check with drivers/araviz
<% if package_info.using_autogen.nil? %>
<%     package_info.using_autogen = %w{autogen autogen.sh}.find { |f| File.exist?(File.join(package_info.srcdir, f)) } %>
<% end %>
<% if package_info.using_autogen %>
DEB_DH_AUTORECONF_ARGS += <%= File.join(".",package_info.using_autogen) %>
<% end %>
include /usr/share/cdbs/1/class/autotools.mk
include /usr/share/cdbs/1/rules/autoreconf.mk

# END AUTOTOOLS
############################################
# BEGIN IMPORTER
#
<% elsif package_info.importer_type == :archive_importer || package_info.build_type == :importer_package || package_info.name =~ /bundles/ %>
CMAKE = $(SOURCE_ENVSH) $(env_setup) cmake
DEB_CMAKE_INSTALL_PREFIX = $(rock_install_dir)
DEB_CMAKE_EXTRA_FLAGS = -DCMAKE_SKIP_RPATH=OFF
DEB_CMAKE_EXTRA_FLAGS += -DGEM_OS_PKG=TRUE
# Leaving RUBY_EXECUTABLE unset since it maps to a path of the user executing the upload script
include /usr/share/cdbs/1/class/cmake.mk

# END IMPORTER
# ##########################################
#
<% else 
raise "debian/rules: cannot handle package type #{package_info.build_type} for #{package_info.name}"
end %>

###########################################
# DOCS

<% if package_info.build_type == :orogen || package_info.build_type == :cmake || package_info.build_type == :autotools %>

# Build docs
# This checks for Doxyfile and runs doxygen with that.
# Otherwise, it tries the "doc" target.
# Since docs are not critical, ignore failures('-' on recipe line start).
# The make call is supposed to be invoked even if -t or -n is selected,
# with the appropriate flags('+' on recipe line start)

common-build-arch common-build-indep:: debian/stamp-rock-doc
debian/stamp-rock-doc:
	-+$(DEB_MAKE_INVOKE) doc
	touch $@

common-install-arch common-install-indep:: common-install-rock-doc install-extensions
common-install-rock-doc::
	mkdir -p $(DEB_DESTDIR)$(rock_doc_install_dir)
	$(if $(wildcard $(DEB_SRCDIR)/doc/html),-cp -r "$(DEB_SRCDIR)/doc/html" "$(DEB_DESTDIR)$(rock_doc_install_dir)",$(if $(wildcard $(DEB_SRCDIR)/doc),-cp -r "$(DEB_SRCDIR)/doc" "$(DEB_DESTDIR)$(rock_doc_install_dir)"))
	$(if $(wildcard $(DEB_BUILDDIR)/doc/html),-cp -r "$(DEB_BUILDDIR)/doc/html" "$(DEB_DESTDIR)$(rock_doc_install_dir)",$(if $(wildcard $(DEB_BUILDDIR)/doc),-cp -r "$(DEB_BUILDDIR)/doc" "$(DEB_DESTDIR)$(rock_doc_install_dir)"))

install-extensions:: install-python
install-python::
ifneq ("$(python_setup_dir)","")
	echo "Installing python extension in $(python_setup_dir)"
	mkdir -p $(DEB_DESTDIR)$(rock_install_dir)/lib/python$(python_version)/site-packages
	cd $(python_setup_dir); $(python_cmd) setup.py build; PYTHONPATH=$(DEB_DESTDIR)$(rock_install_dir)/lib/python$(python_version)/site-packages/ $(python_cmd) setup.py install --prefix=$(DEB_DESTDIR)$(rock_install_dir); cd -
endif

clean::
	rm -f debian/stamp-rock-doc
	rm -rf $(DEB_SRCDIR)/doc/html
<% end %>

# END DOCS
###########################################

<%= env.gen_export_variable %>

#install/<%= debian_name %>::
#	echo "Running post-install for package <%= debian_name %>"

# see https://github.com/Debian/cdbs/blob/master/1/rules/debhelper.mk.in for
# target
common-binary-fixup-arch::
	echo "Apaka: doing all the custom adaptions, once all patches have been applied"
	echo "Installing env.yml (and env.yml.append) in $(rock_install_dir)"
	$(if $(wildcard $(DEB_SRCDIR)/env.yml),-cp "$(DEB_SRCDIR)/env.yml" "$(DEB_DESTDIR)$(rock_install_dir)")
	$(if $(wildcard $(DEB_SRCDIR)/env.yml),-cp "$(DEB_SRCDIR)/env.yml.append" "$(DEB_DESTDIR)$(rock_install_dir)")
	echo "Updating env.sh in $(rock_install_dir)"
	$(if $(wildcard $(DEB_SRCDIR)/env.sh),-cp "$(DEB_SRCDIR)/env.sh" "$(debian_install_prefix)")
<%= env_create_exports() %>
