module Apaka
    module Packaging
        module Gem
            # Canonize that name -- downcase and replace _ with -
            def self.canonize(name)
                name.gsub(/[\/_]/, '-').downcase
            end

            # Rake targets that will be used to clean and create
            # gems
            def self.clean_alternatives
                    ['clean','dist:clean','clobber']
            end

            def self.creation_alternatives
                ['gem','dist:gem','build']
            end

            # Rake and rdoc commands to try to create documentation
            def self.doc_alternatives
                ['rake docs',
                 'rake dist:docs',
                 'rake doc',
                 'rake dist:doc',
                 'rake yard',
                 '/usr/bin/yard -o ./api',
                 'rdoc -o ./api'
                ]
            end

            class Package2Gem < Packager
                def initialize(options)
                    super(options)
                end

                # Create an gem of an existing ruby package
                # @param gem_name [Hash] Instead of using the generated gem
                #       from the pkginfo, rename allow to define the name of the created gem
                def convert_package(pkginfo, packaging_dir,
                                    gem_name: nil,
                                    patch_dir: nil
                                   )
                    Packager.info "Package Ruby: '#{pkginfo.name}' with gem_name: '#{gem_name}'"

                    # update dependencies in any case, i.e. independant if package exists or not
                    deps = pkginfo.dependencies
                    Dir.chdir(pkginfo.srcdir) do
                        begin
                            logname = "package-ruby-#{pkginfo.name.sub("/","-")}" + "-" + Time.now.strftime("%Y%m%d-%H%M%S").to_s + ".log"
                            logfile = File.join(log_dir, logname)

                            gem = FileList["pkg/*.gem"].first
                            if not gem
                                Packager.info "#{self.class}: preparing gem generation in #{Dir.pwd}"

                                # Rake targets that should be tried for cleaning
                                gem_clean_success = false
                                Gem.clean_alternatives.each do |target|
                                    msg, status = Open3.capture2e(pkginfo.env, "bundle exec rake #{target}")
                                    if !status.success?
                                        Packager.info "#{self.class}: failed to clean package '#{pkginfo.name}' using target '#{target}' #{msg} (see #{logfile})"
                                        File.open(logfile,"a+") {|f| f.puts msg }
                                    else
                                        Packager.info "#{self.class}: succeeded to clean package '#{pkginfo.name}' using target '#{target}'"
                                        gem_clean_success = true
                                        break
                                    end
                                end
                                if not gem_clean_success
                                    Packager.warn "#{self.class}: failed to cleanup ruby package '#{pkginfo.name}' -- continuing without cleanup"
                                end

                                Packager.info "#{self.class}: ruby package Manifest.txt is being autogenerated"
                                Package2Gem.generate_manifest_txt
                                Package2Gem.cleanup_multiple_gemspec

                                Packager.info "#{self.class}: creating gem from package #{pkginfo.name} [#{File.join(log_dir, logname)}]"

                                if patch_pkg_dir(pkginfo.name, patch_dir, whitelist: ["*.gemspec", "Rakefile", "metadata.yml"])
                                    Packager.info "#{self.class}: patched build files for ruby package before gem building: #{pkginfo.name}"
                                end

                                # Allowed gem creation alternatives
                                gem_creation_success = false

                                # Gemspec often use the 'git ls -z' listings, which
                                # might break if hidden files will be removed
                                # without commiting -- so temporarily add and revert
                                # again, to maintain the original commit id
                                # TBD: or leave the commit and list the last N commits in the changelog
                                Packager.info "#{self.class}: temporarily commit changes in #{Dir.pwd}"
                                _,_,git_add_status = Open3.capture3("git add -A")
                                msg,git_commit_status = Open3.capture2("git commit -m 'Apaka: gem creation' --author 'Apaka Packager, <apaka@autocommit>'")
                                if !git_commit_status.success?
                                    Packager.info "#{self.class}: commit failed: #{msg}"
                                end
                                Gem.creation_alternatives.each do |target|
                                    msg, status = Open3.capture2e(pkginfo.env, "bundle exec rake #{target}")
                                    if !status.success?
                                        Packager.info "#{self.class}: failed to create gem using target '#{target}' (see #{logfile})"
                                        File.open(logfile,"a+") do |f|
                                            f.puts msg
                                            f.puts pkginfo.env
                                        end
                                    else
                                        Packager.info "#{self.class}: succeeded to create gem using target '#{target}'"
                                        gem_creation_success = true
                                        break
                                    end
                                end
                                if git_commit_status.success?
                                    Packager.info "#{self.class}: git package status"
                                    msg, git_revert = Open3.capture2("git reset --soft HEAD~1")
                                    Packager.info "#{self.class}: reversion of temporary commit failed"
                                end
                                if not gem_creation_success
                                    raise RuntimeError, "Debian: failed to create gem from RubyPackage #{pkginfo.name}"
                                end
                            end

                            gem = FileList["pkg/*.gem"].first

                            # Make the naming of the gem consistent with the naming schema of
                            # other packages
                            #
                            # Make sure the gem has the fullname, e.g.
                            # tools-metaruby instead of just metaruby
                            if gem_name
                                gem_name = gem.sub(Packaging.basename(pkginfo.name), gem_name)
                                if gem != gem_name
                                    Packager.info "#{self.class}: renaming #{gem} to #{gem_name}"
                                end
                            else
                                gem_name = gem
                            end
                            Packager.info "#{self.class}: '#{pkginfo.name}' -- basename: #{Packaging.basename(pkginfo.name)} will be packaged as: #{gem_name}"

                            gem_final_path = File.join(packaging_dir, File.basename(gem_name))
                            Packager.info "#{self.class}: copy #{File.join(Dir.pwd, gem)} to #{gem_final_path}"
                            FileUtils.cp gem, gem_final_path
                            return gem_final_path

                        rescue Exception => e
                            raise RuntimeError, "#{self.class}: failed to create gem from RubyPackage #{pkginfo.name} -- #{e.message}\n#{e.backtrace.drop(1).map{|s| "\t#{s}"}}"
                        end
                    end
                end

                def self.cleanup_multiple_gemspec(gem_name, directory = Dir.pwd)
                    gemspec = "#{gem_name}.gemspec"
                    Dir.chdir(directory) do
                        gemspec_files = Dir.glob("*.gemspec")
                        if gemspec_files.size > 1
                            unless gemspec_files.include?(gemspec)
                                raise "Apaka::Packaging::Gem::Package2Gem.cleanup_multiple_gemspec " \
                                    " Failed to locate gemspec #{gemspec} - available are #{gemspec_files}"
                            end

                            gemspec_files.each do |file|
                                if gemspec != file
                                    FileUtils.rm file
                                end
                            end
                        end
                    end
                end

                def self.generate_manifest_txt(directory = Dir.pwd)
                    manifest_file = "Manifest.txt"
                    if File.exist?(manifest_file)
                        FileUtils.rm manifest_file
                    end
                    Dir.glob("**/**") do |file|
                        if File.file?(file)
                            IO::write(manifest_file, "#{file}\n", :mode => "a")
                        end
                    end
                end
            end
        end
    end
end
