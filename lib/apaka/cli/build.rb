require_relative 'base'
require_relative 'package'

module Apaka
    module CLI
        class Build < Base
            def initialize
                super()
            end

            def validate_options(args, options)
                Base.activate_configuration(options)

                args, options = Base.validate_options(args, options)
                [:dest_dir, :base_dir, :patch_dir, :config_file, :log_dir].each do |path_option|
                    Base.validate_path(options, path_option)
                end

                options[:architecture] = validate_architecture(options)
                options[:distribution] = validate_distribution(options)
                options[:release_name] ||= Packaging.default_release_name

                return args, options
            end

            def prepare_local_build(packager, options)
                puts "Preparing local building of packages"
                local_distribution = packager.target_platform.distribution_release_name
                local_arch = packager.target_platform.architecture
                Apaka::Packaging::Installer.install_all_requirements(build_options[:patch_dir], local_distribution, local_arch)

                tempfile = Tempfile.new("apaka.conf.")
                document_root = File.join(Apaka::Packaging::WWW_ROOT)
                packages_subfolder = File.basename(Apaka::Packaging::DEB_REPOSITORY)
                autogenerated_config = tempfile.path

                Apaka::Packaging::Installer.ensure_webserver_running
                Apaka::Packaging::Installer.create_webserver_config(document_root, packages_subfolder,
                                                                       autogenerated_config)
                Apaka::Packaging::Installer.install_webserver_config(autogenerated_config)

                puts "Preparation completed"
            end


            def build(packager, debian_pkg_name, options)
                debian_package_dir = packager.packaging_dir(debian_pkg_name)

                dsc_file = Dir.glob(File.join(debian_package_dir,"*.dsc")).first
                rebuild_log = File.join(packager.log_dir, "#{debian_pkg_name}-deb_local-rebuild.log")
                if !dsc_file
                    raise RuntimeError, "Local rebuild of pkg #{debian_pkg_name} failed -- see #{rebuild_log}"
                end

                options[:log_file] = File.join(packager.log_dir, "#{debian_pkg_name}-deb_local-build.log")
                options[:dest_dir] ||= debian_package_dir

                if packager.reprepro.has_package?(debian_pkg_name,
                                              options[:release_name],
                                              options[:distribution],
                                              options[:architecture]) && !options[:rebuild]

                    Apaka::Packaging.warn "#{self.class} package #{debian_pkg_name} is already registered in reprepro - use --rebuild to enforce rebuilding"
                    return
                end

                Apaka::Packaging::Installer.build_package_from_dsc(dsc_file,
                                                 options[:distribution],
                                                 options[:architecture],
                                                 options[:release_name],
                                                 options)

                deb_files = Dir.glob(File.join(debian_package_dir,"*.deb"))
                if deb_files.empty?
                    raise RuntimeError, "Building package failed - no *.deb file found"
                end

                deb_file = nil
                deb_files.each do |file|
                    if file =~ /-dbgsym_/
                        next
                    else
                        deb_file = file
                        break
                    end
                end
                if !deb_file
                    raise RuntimeError, "Building package failed - only deb file with debug symbols found"
                end

                Autoproj.info "Registering debian package: #{deb_file}"
                packager.reprepro.register_debian_package(deb_file,
                                                options[:release_name],
                                                options[:distribution],
                                                options[:rebuild])
            end

            def install(packager, debian_pkg_name, options)
                binding.pry
                if Apaka::Packaging::Installer.installed?(debian_pkg_name)
                    puts "Package: #{debian_pkg_name} is already installed"
                end

                if packager.target_platform == Apaka::Packaging::TargetPlatform.autodetect_target_platform
                    puts "############### install #{debian_pkg_name} #####################"
                    install_log = File.join(packager.log_dir,"#{debian_pkg_name}-deb_local-install.log")
                    packager.install(debian_pkg_name)
                #begin
#                    selected_gems.each do |gem_name, gem_version|
#                        is_osdeps = false
#                        native_name, is_osdeps = packager.native_dependency_name(gem_name)
#                        if !is_osdeps
#                            puts "Installing locally: '#{gem_name}'"
#                            debian_name = packager.debian_ruby_name(gem_name, true)
#                            packager.install debian_name, :distributions => o_distributions
#                        else
#                            puts "Package '#{gem_name}' is available as os dependency: #{native_name}"
#                        end
#                    end
#                    selection.each_with_index do |pkg_name, i|
#                        if pkg = package_info_ask.package(pkg_name)
#                            pkg = pkg.autobuild
#                        else
#                            Apaka::Packaging.warn "Package: #{pkg_name} is not a known rock package (but maybe a ruby gem?)"
#                            next
#                        end
#                        pkginfo = package_info_ask.pkginfo_from_pkg(pkg)
#                        debian_name = packager.debian_name(pkginfo)
#
#                        puts "Installing locally: '#{pkg.name}'"
#                        packager.install debian_name, :distributions => o_distributions, :verbose => Autobuild.verbose
#                    end
#                rescue Exception => e
#                    puts "Local install failed: #{e}"
#                    exit 20
#                end

                else
                    puts "Package has been build for #{packager.target_platform}. Not installing package since current platform is #{Apaka::Packaging::TargetPlatform.autodetect_target_platform}"
                end
                
            end

            def run(args, options)
                package = Apaka::CLI::Package.new
                args, options = package.validate_options(args, options)

                if options[:prepare]
                    packager = Apaka::Packaging::Deb::Package2Deb.new(options)
                    prepare(packager, options)
                end

                packaging_results = package.run(args, options)
                packaging_results.each do |packager, debian_pkg_names|
                    debian_pkg_names.each do |debian_pkg_name|
                        binding.pry
                        build(packager, debian_pkg_name, options)
                        binding.pry
                        install(packager, debian_pkg_name, options) if options[:install]
                    end
                end
            end
        end
    end
end
